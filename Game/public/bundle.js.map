{
  "version": 3,
  "sources": ["../src/InputHandler.ts", "../src/Utils.ts", "../src/Projectile.ts", "../src/Player.ts", "../src/Invader.ts", "../src/Game.ts", "../src/index.ts"],
  "sourcesContent": ["// src/InputHandler.ts\r\nimport { Game } from \"./Game\";\r\n\r\nexport class InputHandler {\r\n  constructor(private game: Game) {\r\n    window.addEventListener(\"keydown\", e => this.keyDown(e));\r\n    window.addEventListener(\"keyup\",   e => this.keyUp(e));\r\n  }\r\n\r\n  private keyDown(e: KeyboardEvent) {\r\n    switch (e.code) {\r\n      case \"KeyA\":      // tecla A para mover a la izquierda\r\n        this.game.left = true;\r\n        break;\r\n      case \"KeyD\":      // tecla D para mover a la derecha\r\n        this.game.right = true;\r\n        break;\r\n      case \"Space\":     // espacio para disparar (igual que antes)\r\n        this.game.shoot = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private keyUp(e: KeyboardEvent) {\r\n    switch (e.code) {\r\n      case \"KeyA\":\r\n        this.game.left = false;\r\n        break;\r\n      case \"KeyD\":\r\n        this.game.right = false;\r\n        break;\r\n      case \"Space\":\r\n        this.game.shoot = false;\r\n        break;\r\n    }\r\n  }\r\n}\r\n", "// src/Utils.ts\r\n\r\n// Colores generales\r\nexport const COLOR_BG         = \"#111\";\r\nexport const COLOR_TEXT       = \"white\";\r\nexport const COLOR_PROJECTILE = \"white\";\r\nexport const COLOR_PLAYER     = \"cyan\";\r\n\r\n// Tama\u00F1o del canvas\r\nexport const CANVAS_WIDTH     = 800;\r\nexport const CANVAS_HEIGHT    = 600;\r\n\r\n// Par\u00E1metros del jugador\r\nexport const PLAYER_SPEED     = 300;  // px/s\r\nexport const SHOOT_COOLDOWN   = 0.5;  // segundos\r\n\r\n// Escalado de invaders por ronda\r\nexport const INVADER_BASE_SPEED = 50;  // px/s en ronda 1\r\nexport const INVADER_SPEED_STEP = 10;  // px/s adicionales cada ronda\r\nexport const INVADER_BASE_HITS  = 1;   // golpes en ronda 1\r\nexport const INVADER_HITS_STEP  = 1;   // golpes adicionales cada ronda\r\nexport const INVADER_PADDING    = 20;  // separaci\u00F3n\r\n\r\n// Configuraci\u00F3n de olas\r\nexport const INVADER_ROWS      = 3;    // filas\r\nexport const INVADER_COLS      = 10;   // columnas\r\nexport const TOTAL_WAVES       = 10;   // n\u00FAmero total de rondas\r\n\r\n// Colores por ola\r\nexport const WAVE_COLORS = [\r\n  \"lime\", \"cyan\", \"yellow\", \"orange\", \"red\",\r\n  \"magenta\", \"blue\", \"white\", \"grey\", \"brown\"\r\n];\r\n\r\n// Puntuaci\u00F3n y combo\r\nexport const BASE_POINTS       = 10;\r\nexport const BONUS_POINTS      = 5;\r\nexport const COMBO_THRESHOLD   = 5;\r\n", "// src/Projectile.ts\r\nimport { Game } from \"./Game\";\r\nimport { COLOR_PROJECTILE } from \"./Utils\";\r\n\r\nexport class Projectile {\r\n  x: number;\r\n  y: number;\r\n  width  = 4;\r\n  height = 10;\r\n  vy: number;\r\n  game: Game;\r\n\r\n  constructor(x: number, y: number, vy: number, game: Game) {\r\n    this.x = x - this.width / 2;\r\n    this.y = y;\r\n    this.vy = vy;\r\n    this.game = game;\r\n  }\r\n\r\n  update(dt: number) {\r\n    this.y += this.vy * dt;\r\n\r\n    // Si sale de pantalla\r\n    if (this.y + this.height < 0) {\r\n      // bala del jugador fall\u00F3\r\n      this.game.registerMiss();\r\n      this.game.projectiles = this.game.projectiles.filter(p => p !== this);\r\n      return;\r\n    }\r\n    if (this.y > this.game.height) {\r\n      // bala enemiga pas\u00F3 de largo\r\n      this.game.projectiles = this.game.projectiles.filter(p => p !== this);\r\n      return;\r\n    }\r\n\r\n    // Colisi\u00F3n con invaders (s\u00F3lo si va hacia arriba)\r\n    if (this.vy < 0) {\r\n      this.game.invaders.forEach(inv => {\r\n        if (this.collides(inv)) {\r\n          this.game.registerHit();\r\n          this.game.invaders = this.game.invaders.filter(i => i !== inv);\r\n          this.game.projectiles = this.game.projectiles.filter(p => p !== this);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Colisi\u00F3n con jugador (s\u00F3lo si vy > 0)\r\n    if (this.vy > 0 && this.collides(this.game.player)) {\r\n      this.game.loseLife();\r\n      this.game.projectiles = this.game.projectiles.filter(p => p !== this);\r\n    }\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = COLOR_PROJECTILE;\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n  }\r\n\r\n  private collides(target: { x: number; y: number; width: number; height: number }) {\r\n    return (\r\n      this.x < target.x + target.width &&\r\n      this.x + this.width > target.x &&\r\n      this.y < target.y + target.height &&\r\n      this.y + this.height > target.y\r\n    );\r\n  }\r\n}\r\n", "// src/Player.ts\r\nimport { Game } from \"./Game\";\r\nimport { Projectile } from \"./Projectile\";\r\n\r\nexport class Player {\r\n  x: number;\r\n  y: number;\r\n  width  = 60;\r\n  height = 20;\r\n  speed  = 300;     // px/s\r\n  cooldown = 0;     // segundos\r\n\r\n  constructor(private game: Game) {\r\n    this.x = (game.width - this.width) / 2;\r\n    this.y =  game.height - this.height - 10;\r\n  }\r\n\r\n  update(dt: number) {\r\n    if (this.game.left)  this.x = Math.max(0, this.x - this.speed * dt);\r\n    if (this.game.right) this.x = Math.min(this.game.width - this.width, this.x + this.speed * dt);\r\n\r\n    if (this.game.shoot && this.cooldown <= 0) {\r\n      this.game.projectiles.push(\r\n        new Projectile(this.x + this.width/2, this.y, -500, this.game)\r\n      );\r\n      this.cooldown = 0.5;\r\n    }\r\n\r\n    this.cooldown = Math.max(0, this.cooldown - dt);\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = \"cyan\";\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n  }\r\n}\r\n", "// src/Invader.ts\r\nimport { Game } from \"./Game\";\r\nimport { Projectile } from \"./Projectile\";\r\n\r\nexport class Invader {\r\n  // Tama\u00F1o fijo de cada invader\r\n  static width  = 40;\r\n  static height = 30;\r\n\r\n  // Instancia expone width/height para colisiones\r\n  width  = Invader.width;\r\n  height = Invader.height;\r\n\r\n  x: number;\r\n  y: number;\r\n  dir = 1;            // 1 = derecha, -1 = izquierda\r\n  speed: number;      // velocidad en px/s, recibida en el constructor\r\n  hitsRemaining: number; // cu\u00E1ntos impactos aguanta\r\n  color: string;      // color de dibujo\r\n  private game: Game;\r\n\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    hits: number,\r\n    speed: number,\r\n    color: string,\r\n    game: Game\r\n  ) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.hitsRemaining = hits;\r\n    this.speed = speed;\r\n    this.color = color;\r\n    this.game = game;\r\n  }\r\n\r\n  update(dt: number) {\r\n    // Movimiento horizontal y rebote\r\n    this.x += this.speed * this.dir * dt;\r\n    if (this.x < 0 || this.x + this.width > this.game.width) {\r\n      this.dir *= -1;\r\n      this.y += this.height / 2;\r\n    }\r\n\r\n    // Disparo aleatorio hacia abajo\r\n    if (Math.random() < 0.001) {\r\n      this.game.projectiles.push(\r\n        new Projectile(\r\n          this.x + this.width / 2,\r\n          this.y + this.height,\r\n          200,       // velocidad vy positiva\r\n          this.game\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n    // Dibuja el invader\r\n    ctx.fillStyle = this.color;\r\n    ctx.fillRect(this.x, this.y, this.width, this.height);\r\n\r\n    // (Opcional) dibuja cu\u00E1ntos impactos le quedan\r\n    ctx.fillStyle = \"black\";\r\n    ctx.font = \"12px sans-serif\";\r\n    ctx.fillText(\r\n      String(this.hitsRemaining),\r\n      this.x + this.width / 2 - 6,\r\n      this.y + this.height / 2 + 4\r\n    );\r\n  }\r\n}\r\n", "// src/Game.ts\r\nimport { InputHandler }   from \"./InputHandler\";\r\nimport { Player }         from \"./Player\";\r\nimport { Invader }        from \"./Invader\";\r\nimport { Projectile }     from \"./Projectile\";\r\nimport {\r\n  COLOR_BG, COLOR_TEXT,\r\n  INVADER_BASE_SPEED, INVADER_SPEED_STEP,\r\n  INVADER_BASE_HITS,  INVADER_HITS_STEP,\r\n  INVADER_PADDING,\r\n  INVADER_ROWS, INVADER_COLS,\r\n  WAVE_COLORS, TOTAL_WAVES,\r\n  BASE_POINTS, BONUS_POINTS, COMBO_THRESHOLD\r\n} from \"./Utils\";\r\n\r\nexport class Game {\r\n  left = false;\r\n  right = false;\r\n  shoot = false;\r\n\r\n  player: Player;\r\n  invaders: Invader[]     = [];\r\n  projectiles: Projectile[]= [];\r\n\r\n  score = 0;\r\n  consecutiveHits = 0;\r\n  lives = 3;\r\n  gameOver = false;\r\n  victory  = false;\r\n\r\n  private waveIndex = 0;\r\n  private lastTime = 0;\r\n\r\n  constructor(\r\n    public width: number,\r\n    public height: number,\r\n    public ctx: CanvasRenderingContext2D\r\n  ) {\r\n    this.player = new Player(this);\r\n    new InputHandler(this);\r\n    this.spawnWave();\r\n  }\r\n\r\n  /** Impactos por invader: ronda1\u20132\u21921, ronda3\u21922, ronda4\u21923, etc. */\r\n  private hitsForWave(): number {\r\n    return Math.max(1, this.waveIndex);\r\n  }\r\n\r\n  /** Velocidad por invader: base + paso*ronda */\r\n  private speedForWave(): number {\r\n    return INVADER_BASE_SPEED + this.waveIndex * INVADER_SPEED_STEP;\r\n  }\r\n\r\n  /**\r\n   * Genera INVADER_ROWS filas y (INVADER_COLS + waveIndex) columnas\r\n   * sin aleatoriedad para garantizar repoblaci\u00F3n.\r\n   */\r\n  private spawnWave() {\r\n    this.invaders = [];\r\n    const hits  = INVADER_BASE_HITS + this.waveIndex * INVADER_HITS_STEP;\r\n    const speed = this.speedForWave();\r\n    const color = WAVE_COLORS[this.waveIndex];\r\n    const rows  = INVADER_ROWS;\r\n    const cols  = INVADER_COLS + this.waveIndex; // +1 columna cada ronda\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        const x = col * (Invader.width + INVADER_PADDING);\r\n        const y = 50 + row * (Invader.height + INVADER_PADDING);\r\n        this.invaders.push(\r\n          new Invader(x, y, hits, speed, color, this)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.lastTime = performance.now();\r\n    requestAnimationFrame(this.animate.bind(this));\r\n  }\r\n\r\n  private animate(ts: number) {\r\n    const dt = (ts - this.lastTime) / 1000;\r\n    this.lastTime = ts;\r\n\r\n    // Limpia el canvas\r\n    this.ctx.fillStyle = COLOR_BG;\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n\r\n    // Actualiza y dibuja jugador\r\n    this.player.update(dt);\r\n    this.player.draw(this.ctx);\r\n\r\n    // Actualiza y dibuja invaders y proyectiles\r\n    this.invaders.forEach(i => { i.update(dt); i.draw(this.ctx); });\r\n    this.projectiles.forEach(p => { p.update(dt); p.draw(this.ctx); });\r\n\r\n    // HUD: puntuaci\u00F3n, ronda y vidas\r\n    this.ctx.fillStyle = COLOR_TEXT;\r\n    this.ctx.font = \"20px sans-serif\";\r\n    this.ctx.fillText(`Score: ${this.score}`, 20, 30);\r\n    this.ctx.fillText(`Wave: ${this.waveIndex + 1}/${TOTAL_WAVES}`, 20, 60);\r\n    for (let i = 0; i < this.lives; i++) {\r\n      this.ctx.fillText(\"\u2665\", this.width - 30 - i * 20, 30);\r\n    }\r\n\r\n    // Game Over\r\n    if (this.gameOver) {\r\n      this.drawEnd(\"Game Over\");\r\n      return;\r\n    }\r\n\r\n    // Si limpiaste la oleada, pasa a la siguiente o victoria\r\n    if (this.invaders.length === 0) {\r\n      this.waveIndex++;\r\n      if (this.waveIndex < TOTAL_WAVES) {\r\n        this.spawnWave();\r\n      } else {\r\n        this.victory = true;\r\n      }\r\n    }\r\n\r\n    // Victory\r\n    if (this.victory) {\r\n      this.drawEnd(\"\u00A1Felicidades, ganaste!\");\r\n      return;\r\n    }\r\n\r\n    requestAnimationFrame(this.animate.bind(this));\r\n  }\r\n\r\n  private drawEnd(msg: string) {\r\n    this.ctx.fillStyle = COLOR_TEXT;\r\n    this.ctx.font = \"48px sans-serif\";\r\n    this.ctx.fillText(msg, this.width / 2 - 200, this.height / 2);\r\n    this.ctx.font = \"24px sans-serif\";\r\n    this.ctx.fillText(`Score: ${this.score}`, this.width / 2 - 70, this.height / 2 + 40);\r\n  }\r\n\r\n  // M\u00E9todos de puntuaci\u00F3n y vidas\r\n\r\n  public registerHit() {\r\n    this.consecutiveHits++;\r\n    const extra = this.consecutiveHits >= COMBO_THRESHOLD ? BONUS_POINTS : 0;\r\n    this.score += BASE_POINTS + extra;\r\n  }\r\n\r\n  public registerMiss() {\r\n    this.consecutiveHits = 0;\r\n  }\r\n\r\n  public loseLife() {\r\n    this.lives--;\r\n    if (this.lives <= 0) this.gameOver = true;\r\n  }\r\n}\r\n", "// src/index.ts\r\nimport { Game } from \"./Game\";\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n  const canvas = document.getElementById(\"gameCanvas\") as HTMLCanvasElement;\r\n  const ctx = canvas.getContext(\"2d\")!;\r\n  const game = new Game(canvas.width, canvas.height, ctx);\r\n\r\n  const menu = document.getElementById(\"menu\")!;\r\n  const startBtn = document.getElementById(\"startBtn\")!;\r\n  startBtn.addEventListener(\"click\", () => {\r\n    menu.style.display = \"none\";   // Oculta el men\u00FA\r\n    game.start();                  // Comienza el juego\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
